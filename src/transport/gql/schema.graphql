directive @cacheControl(
    maxAge: Int
    scope: CacheControlScope
) on FIELD_DEFINITION | OBJECT | INTERFACE
directive @specifiedBy(url: String!) on SCALAR
input AccessKey {
    key: String
    restrictToAccounts: [String]
}

type Account {
    id: String
    acc_type: Int
    acc_type_name: AccountStatusEnum
    balance(format: BigIntFormat): String
    balance_other: [OtherCurrency]
    bits(format: BigIntFormat): String
    boc: String
    cells(format: BigIntFormat): String
    code: String
    code_hash: String
    data: String
    data_hash: String
    due_payment(format: BigIntFormat): String
    last_paid: Float
    last_trans_lt(format: BigIntFormat): String
    library: String
    library_hash: String
    proof: String
    public_cells(format: BigIntFormat): String
    split_depth: Int
    state_hash: String
    tick: Boolean
    tock: Boolean
    workchain_id: Int
}

input AccountFilter {
    id: StringFilter
    acc_type: IntFilter
    acc_type_name: AccountStatusEnumFilter
    balance: StringFilter
    balance_other: OtherCurrencyArrayFilter
    bits: StringFilter
    boc: StringFilter
    cells: StringFilter
    code: StringFilter
    code_hash: StringFilter
    data: StringFilter
    data_hash: StringFilter
    due_payment: StringFilter
    last_paid: FloatFilter
    last_trans_lt: StringFilter
    library: StringFilter
    library_hash: StringFilter
    proof: StringFilter
    public_cells: StringFilter
    split_depth: IntFilter
    state_hash: StringFilter
    tick: BooleanFilter
    tock: BooleanFilter
    workchain_id: IntFilter
    OR: AccountFilter
}

enum AccountStatusChangeEnum {
    Unchanged
    Frozen
    Deleted
}

input AccountStatusChangeEnumFilter {
    eq: AccountStatusChangeEnum
    ne: AccountStatusChangeEnum
    gt: AccountStatusChangeEnum
    lt: AccountStatusChangeEnum
    ge: AccountStatusChangeEnum
    le: AccountStatusChangeEnum
    in: [AccountStatusChangeEnum]
    notIn: [AccountStatusChangeEnum]
}

enum AccountStatusEnum {
    Uninit
    Active
    Frozen
    NonExist
}

input AccountStatusEnumFilter {
    eq: AccountStatusEnum
    ne: AccountStatusEnum
    gt: AccountStatusEnum
    lt: AccountStatusEnum
    ge: AccountStatusEnum
    le: AccountStatusEnum
    in: [AccountStatusEnum]
    notIn: [AccountStatusEnum]
}

enum AggregationFn {
    COUNT
    MIN
    MAX
    SUM
    AVERAGE
}

enum BigIntFormat {
    HEX
    DEC
}

type Block {
    id: String
    account_blocks: [BlockAccountBlocks]
    after_merge: Boolean
    after_split: Boolean
    before_split: Boolean
    boc: String
    created_by: String
    end_lt(format: BigIntFormat): String
    flags: Int
    gen_catchain_seqno: Float
    gen_software_capabilities: String
    gen_software_version: Float
    gen_utime: Float
    gen_utime_string: String
    gen_validator_list_hash_short: Float
    global_id: Int
    in_msg_descr: [InMsg]
    key_block: Boolean
    master: BlockMaster
    master_ref: ExtBlkRef
    min_ref_mc_seqno: Float
    out_msg_descr: [OutMsg]
    prev_alt_ref: ExtBlkRef
    prev_key_block_seqno: Float
    prev_ref: ExtBlkRef
    prev_vert_alt_ref: ExtBlkRef
    prev_vert_ref: ExtBlkRef
    rand_seed: String
    seq_no: Float
    shard: String
    signatures(timeout: Int, when: BlockFilter): BlockSignatures
    start_lt(format: BigIntFormat): String
    state_update: BlockStateUpdate
    status: Int
    status_name: BlockProcessingStatusEnum
    tr_count: Int
    value_flow: BlockValueFlow
    version: Float
    vert_seq_no: Float
    want_merge: Boolean
    want_split: Boolean
    workchain_id: Int
}

type BlockAccountBlocks {
    account_addr: String
    new_hash: String
    old_hash: String
    tr_count: Int
    transactions: [BlockAccountBlocksTransactions]
}

input BlockAccountBlocksArrayFilter {
    any: BlockAccountBlocksFilter
    all: BlockAccountBlocksFilter
}

input BlockAccountBlocksFilter {
    account_addr: StringFilter
    new_hash: StringFilter
    old_hash: StringFilter
    tr_count: IntFilter
    transactions: BlockAccountBlocksTransactionsArrayFilter
    OR: BlockAccountBlocksFilter
}

type BlockAccountBlocksTransactions {
    lt(format: BigIntFormat): String
    total_fees(format: BigIntFormat): String
    total_fees_other: [OtherCurrency]
    transaction_id: String
}

input BlockAccountBlocksTransactionsArrayFilter {
    any: BlockAccountBlocksTransactionsFilter
    all: BlockAccountBlocksTransactionsFilter
}

input BlockAccountBlocksTransactionsFilter {
    lt: StringFilter
    total_fees: StringFilter
    total_fees_other: OtherCurrencyArrayFilter
    transaction_id: StringFilter
    OR: BlockAccountBlocksTransactionsFilter
}

input BlockFilter {
    id: StringFilter
    account_blocks: BlockAccountBlocksArrayFilter
    after_merge: BooleanFilter
    after_split: BooleanFilter
    before_split: BooleanFilter
    boc: StringFilter
    created_by: StringFilter
    end_lt: StringFilter
    flags: IntFilter
    gen_catchain_seqno: FloatFilter
    gen_software_capabilities: StringFilter
    gen_software_version: FloatFilter
    gen_utime: FloatFilter
    gen_validator_list_hash_short: FloatFilter
    global_id: IntFilter
    in_msg_descr: InMsgArrayFilter
    key_block: BooleanFilter
    master: BlockMasterFilter
    master_ref: ExtBlkRefFilter
    min_ref_mc_seqno: FloatFilter
    out_msg_descr: OutMsgArrayFilter
    prev_alt_ref: ExtBlkRefFilter
    prev_key_block_seqno: FloatFilter
    prev_ref: ExtBlkRefFilter
    prev_vert_alt_ref: ExtBlkRefFilter
    prev_vert_ref: ExtBlkRefFilter
    rand_seed: StringFilter
    seq_no: FloatFilter
    shard: StringFilter
    signatures: BlockSignaturesFilter
    start_lt: StringFilter
    state_update: BlockStateUpdateFilter
    status: IntFilter
    status_name: BlockProcessingStatusEnumFilter
    tr_count: IntFilter
    value_flow: BlockValueFlowFilter
    version: FloatFilter
    vert_seq_no: FloatFilter
    want_merge: BooleanFilter
    want_split: BooleanFilter
    workchain_id: IntFilter
    OR: BlockFilter
}

type BlockLimits {
    bytes: BlockLimitsBytes
    gas: BlockLimitsGas
    lt_delta: BlockLimitsLtDelta
}

type BlockLimitsBytes {
    hard_limit: Float
    soft_limit: Float
    underload: Float
}

input BlockLimitsBytesFilter {
    hard_limit: FloatFilter
    soft_limit: FloatFilter
    underload: FloatFilter
    OR: BlockLimitsBytesFilter
}

input BlockLimitsFilter {
    bytes: BlockLimitsBytesFilter
    gas: BlockLimitsGasFilter
    lt_delta: BlockLimitsLtDeltaFilter
    OR: BlockLimitsFilter
}

type BlockLimitsGas {
    hard_limit: Float
    soft_limit: Float
    underload: Float
}

input BlockLimitsGasFilter {
    hard_limit: FloatFilter
    soft_limit: FloatFilter
    underload: FloatFilter
    OR: BlockLimitsGasFilter
}

type BlockLimitsLtDelta {
    hard_limit: Float
    soft_limit: Float
    underload: Float
}

input BlockLimitsLtDeltaFilter {
    hard_limit: FloatFilter
    soft_limit: FloatFilter
    underload: FloatFilter
    OR: BlockLimitsLtDeltaFilter
}

type BlockMaster {
    config: Config
    config_addr: String
    max_shard_gen_utime: Float
    max_shard_gen_utime_string: String
    min_shard_gen_utime: Float
    min_shard_gen_utime_string: String
    prev_blk_signatures: [BlockMasterPrevBlkSignatures]
    recover_create_msg: InMsg
    shard_fees: [BlockMasterShardFees]
    shard_hashes: [BlockMasterShardHashes]
}

input BlockMasterFilter {
    config: ConfigFilter
    config_addr: StringFilter
    max_shard_gen_utime: FloatFilter
    min_shard_gen_utime: FloatFilter
    prev_blk_signatures: BlockMasterPrevBlkSignaturesArrayFilter
    recover_create_msg: InMsgFilter
    shard_fees: BlockMasterShardFeesArrayFilter
    shard_hashes: BlockMasterShardHashesArrayFilter
    OR: BlockMasterFilter
}

type BlockMasterPrevBlkSignatures {
    node_id: String
    r: String
    s: String
}

input BlockMasterPrevBlkSignaturesArrayFilter {
    any: BlockMasterPrevBlkSignaturesFilter
    all: BlockMasterPrevBlkSignaturesFilter
}

input BlockMasterPrevBlkSignaturesFilter {
    node_id: StringFilter
    r: StringFilter
    s: StringFilter
    OR: BlockMasterPrevBlkSignaturesFilter
}

type BlockMasterShardFees {
    create(format: BigIntFormat): String
    create_other: [OtherCurrency]
    fees(format: BigIntFormat): String
    fees_other: [OtherCurrency]
    shard: String
    workchain_id: Int
}

input BlockMasterShardFeesArrayFilter {
    any: BlockMasterShardFeesFilter
    all: BlockMasterShardFeesFilter
}

input BlockMasterShardFeesFilter {
    create: StringFilter
    create_other: OtherCurrencyArrayFilter
    fees: StringFilter
    fees_other: OtherCurrencyArrayFilter
    shard: StringFilter
    workchain_id: IntFilter
    OR: BlockMasterShardFeesFilter
}

type BlockMasterShardHashes {
    descr: BlockMasterShardHashesDescr
    shard: String
    workchain_id: Int
}

input BlockMasterShardHashesArrayFilter {
    any: BlockMasterShardHashesFilter
    all: BlockMasterShardHashesFilter
}

type BlockMasterShardHashesDescr {
    before_merge: Boolean
    before_split: Boolean
    end_lt(format: BigIntFormat): String
    fees_collected(format: BigIntFormat): String
    fees_collected_other: [OtherCurrency]
    file_hash: String
    flags: Int
    funds_created(format: BigIntFormat): String
    funds_created_other: [OtherCurrency]
    gen_utime: Float
    gen_utime_string: String
    min_ref_mc_seqno: Float
    next_catchain_seqno: Float
    next_validator_shard: String
    nx_cc_updated: Boolean
    reg_mc_seqno: Float
    root_hash: String
    seq_no: Float
    split: Float
    split_type: Int
    split_type_name: SplitTypeEnum
    start_lt(format: BigIntFormat): String
    want_merge: Boolean
    want_split: Boolean
}

input BlockMasterShardHashesDescrFilter {
    before_merge: BooleanFilter
    before_split: BooleanFilter
    end_lt: StringFilter
    fees_collected: StringFilter
    fees_collected_other: OtherCurrencyArrayFilter
    file_hash: StringFilter
    flags: IntFilter
    funds_created: StringFilter
    funds_created_other: OtherCurrencyArrayFilter
    gen_utime: FloatFilter
    min_ref_mc_seqno: FloatFilter
    next_catchain_seqno: FloatFilter
    next_validator_shard: StringFilter
    nx_cc_updated: BooleanFilter
    reg_mc_seqno: FloatFilter
    root_hash: StringFilter
    seq_no: FloatFilter
    split: FloatFilter
    split_type: IntFilter
    split_type_name: SplitTypeEnumFilter
    start_lt: StringFilter
    want_merge: BooleanFilter
    want_split: BooleanFilter
    OR: BlockMasterShardHashesDescrFilter
}

input BlockMasterShardHashesFilter {
    descr: BlockMasterShardHashesDescrFilter
    shard: StringFilter
    workchain_id: IntFilter
    OR: BlockMasterShardHashesFilter
}

enum BlockProcessingStatusEnum {
    Unknown
    Proposed
    Finalized
    Refused
}

input BlockProcessingStatusEnumFilter {
    eq: BlockProcessingStatusEnum
    ne: BlockProcessingStatusEnum
    gt: BlockProcessingStatusEnum
    lt: BlockProcessingStatusEnum
    ge: BlockProcessingStatusEnum
    le: BlockProcessingStatusEnum
    in: [BlockProcessingStatusEnum]
    notIn: [BlockProcessingStatusEnum]
}

type BlockSignatures {
    id: String
    block(timeout: Int, when: BlockSignaturesFilter): Block
    catchain_seqno: Float
    gen_utime: Float
    gen_utime_string: String
    proof: String
    seq_no: Float
    shard: String
    sig_weight(format: BigIntFormat): String
    signatures: [BlockSignaturesSignatures]
    validator_list_hash_short: Float
    workchain_id: Int
}

input BlockSignaturesFilter {
    id: StringFilter
    block: BlockFilter
    catchain_seqno: FloatFilter
    gen_utime: FloatFilter
    proof: StringFilter
    seq_no: FloatFilter
    shard: StringFilter
    sig_weight: StringFilter
    signatures: BlockSignaturesSignaturesArrayFilter
    validator_list_hash_short: FloatFilter
    workchain_id: IntFilter
    OR: BlockSignaturesFilter
}

type BlockSignaturesSignatures {
    node_id: String
    r: String
    s: String
}

input BlockSignaturesSignaturesArrayFilter {
    any: BlockSignaturesSignaturesFilter
    all: BlockSignaturesSignaturesFilter
}

input BlockSignaturesSignaturesFilter {
    node_id: StringFilter
    r: StringFilter
    s: StringFilter
    OR: BlockSignaturesSignaturesFilter
}

type BlockStateUpdate {
    new: String
    new_depth: Int
    new_hash: String
    old: String
    old_depth: Int
    old_hash: String
}

input BlockStateUpdateFilter {
    new: StringFilter
    new_depth: IntFilter
    new_hash: StringFilter
    old: StringFilter
    old_depth: IntFilter
    old_hash: StringFilter
    OR: BlockStateUpdateFilter
}

type BlockValueFlow {
    created(format: BigIntFormat): String
    created_other: [OtherCurrency]
    exported(format: BigIntFormat): String
    exported_other: [OtherCurrency]
    fees_collected(format: BigIntFormat): String
    fees_collected_other: [OtherCurrency]
    fees_imported(format: BigIntFormat): String
    fees_imported_other: [OtherCurrency]
    from_prev_blk(format: BigIntFormat): String
    from_prev_blk_other: [OtherCurrency]
    imported(format: BigIntFormat): String
    imported_other: [OtherCurrency]
    minted(format: BigIntFormat): String
    minted_other: [OtherCurrency]
    to_next_blk(format: BigIntFormat): String
    to_next_blk_other: [OtherCurrency]
}

input BlockValueFlowFilter {
    created: StringFilter
    created_other: OtherCurrencyArrayFilter
    exported: StringFilter
    exported_other: OtherCurrencyArrayFilter
    fees_collected: StringFilter
    fees_collected_other: OtherCurrencyArrayFilter
    fees_imported: StringFilter
    fees_imported_other: OtherCurrencyArrayFilter
    from_prev_blk: StringFilter
    from_prev_blk_other: OtherCurrencyArrayFilter
    imported: StringFilter
    imported_other: OtherCurrencyArrayFilter
    minted: StringFilter
    minted_other: OtherCurrencyArrayFilter
    to_next_blk: StringFilter
    to_next_blk_other: OtherCurrencyArrayFilter
    OR: BlockValueFlowFilter
}

input BooleanFilter {
    eq: Boolean
    ne: Boolean
    gt: Boolean
    lt: Boolean
    ge: Boolean
    le: Boolean
    in: [Boolean]
    notIn: [Boolean]
}

enum BounceTypeEnum {
    NegFunds
    NoFunds
    Ok
}

input BounceTypeEnumFilter {
    eq: BounceTypeEnum
    ne: BounceTypeEnum
    gt: BounceTypeEnum
    lt: BounceTypeEnum
    ge: BounceTypeEnum
    le: BounceTypeEnum
    in: [BounceTypeEnum]
    notIn: [BounceTypeEnum]
}

enum CacheControlScope {
    PUBLIC
    PRIVATE
}

enum ComputeTypeEnum {
    Skipped
    Vm
}

input ComputeTypeEnumFilter {
    eq: ComputeTypeEnum
    ne: ComputeTypeEnum
    gt: ComputeTypeEnum
    lt: ComputeTypeEnum
    ge: ComputeTypeEnum
    le: ComputeTypeEnum
    in: [ComputeTypeEnum]
    notIn: [ComputeTypeEnum]
}

type Config {
    p0: String
    p1: String
    p10: [Float]
    p11: ConfigP11
    p12: [ConfigP12]
    p14: ConfigP14
    p15: ConfigP15
    p16: ConfigP16
    p17: ConfigP17
    p18: [ConfigP18]
    p2: String
    p20: GasLimitsPrices
    p21: GasLimitsPrices
    p22: BlockLimits
    p23: BlockLimits
    p24: MsgForwardPrices
    p25: MsgForwardPrices
    p28: ConfigP28
    p29: ConfigP29
    p3: String
    p31: [String]
    p32: ValidatorSet
    p33: ValidatorSet
    p34: ValidatorSet
    p35: ValidatorSet
    p36: ValidatorSet
    p37: ValidatorSet
    p39: [ConfigP39]
    p4: String
    p6: ConfigP6
    p7: [ConfigP7]
    p8: ConfigP8
    p9: [Float]
}

input ConfigFilter {
    p0: StringFilter
    p1: StringFilter
    p10: FloatArrayFilter
    p11: ConfigP11Filter
    p12: ConfigP12ArrayFilter
    p14: ConfigP14Filter
    p15: ConfigP15Filter
    p16: ConfigP16Filter
    p17: ConfigP17Filter
    p18: ConfigP18ArrayFilter
    p2: StringFilter
    p20: GasLimitsPricesFilter
    p21: GasLimitsPricesFilter
    p22: BlockLimitsFilter
    p23: BlockLimitsFilter
    p24: MsgForwardPricesFilter
    p25: MsgForwardPricesFilter
    p28: ConfigP28Filter
    p29: ConfigP29Filter
    p3: StringFilter
    p31: StringArrayFilter
    p32: ValidatorSetFilter
    p33: ValidatorSetFilter
    p34: ValidatorSetFilter
    p35: ValidatorSetFilter
    p36: ValidatorSetFilter
    p37: ValidatorSetFilter
    p39: ConfigP39ArrayFilter
    p4: StringFilter
    p6: ConfigP6Filter
    p7: ConfigP7ArrayFilter
    p8: ConfigP8Filter
    p9: FloatArrayFilter
    OR: ConfigFilter
}

type ConfigP11 {
    critical_params: ConfigProposalSetup
    normal_params: ConfigProposalSetup
}

input ConfigP11Filter {
    critical_params: ConfigProposalSetupFilter
    normal_params: ConfigProposalSetupFilter
    OR: ConfigP11Filter
}

type ConfigP12 {
    accept_msgs: Boolean
    active: Boolean
    actual_min_split: Int
    addr_len_step: Int
    basic: Boolean
    enabled_since: Float
    flags: Int
    max_addr_len: Int
    max_split: Int
    min_addr_len: Int
    min_split: Int
    version: Float
    vm_mode: String
    vm_version: Int
    workchain_id: Int
    workchain_type_id: Float
    zerostate_file_hash: String
    zerostate_root_hash: String
}

input ConfigP12ArrayFilter {
    any: ConfigP12Filter
    all: ConfigP12Filter
}

input ConfigP12Filter {
    accept_msgs: BooleanFilter
    active: BooleanFilter
    actual_min_split: IntFilter
    addr_len_step: IntFilter
    basic: BooleanFilter
    enabled_since: FloatFilter
    flags: IntFilter
    max_addr_len: IntFilter
    max_split: IntFilter
    min_addr_len: IntFilter
    min_split: IntFilter
    version: FloatFilter
    vm_mode: StringFilter
    vm_version: IntFilter
    workchain_id: IntFilter
    workchain_type_id: FloatFilter
    zerostate_file_hash: StringFilter
    zerostate_root_hash: StringFilter
    OR: ConfigP12Filter
}

type ConfigP14 {
    basechain_block_fee(format: BigIntFormat): String
    masterchain_block_fee(format: BigIntFormat): String
}

input ConfigP14Filter {
    basechain_block_fee: StringFilter
    masterchain_block_fee: StringFilter
    OR: ConfigP14Filter
}

type ConfigP15 {
    elections_end_before: Float
    elections_start_before: Float
    stake_held_for: Float
    validators_elected_for: Float
}

input ConfigP15Filter {
    elections_end_before: FloatFilter
    elections_start_before: FloatFilter
    stake_held_for: FloatFilter
    validators_elected_for: FloatFilter
    OR: ConfigP15Filter
}

type ConfigP16 {
    max_main_validators: Int
    max_validators: Int
    min_validators: Int
}

input ConfigP16Filter {
    max_main_validators: IntFilter
    max_validators: IntFilter
    min_validators: IntFilter
    OR: ConfigP16Filter
}

type ConfigP17 {
    max_stake(format: BigIntFormat): String
    max_stake_factor: Float
    min_stake(format: BigIntFormat): String
    min_total_stake(format: BigIntFormat): String
}

input ConfigP17Filter {
    max_stake: StringFilter
    max_stake_factor: FloatFilter
    min_stake: StringFilter
    min_total_stake: StringFilter
    OR: ConfigP17Filter
}

type ConfigP18 {
    bit_price_ps(format: BigIntFormat): String
    cell_price_ps(format: BigIntFormat): String
    mc_bit_price_ps(format: BigIntFormat): String
    mc_cell_price_ps(format: BigIntFormat): String
    utime_since: Float
    utime_since_string: String
}

input ConfigP18ArrayFilter {
    any: ConfigP18Filter
    all: ConfigP18Filter
}

input ConfigP18Filter {
    bit_price_ps: StringFilter
    cell_price_ps: StringFilter
    mc_bit_price_ps: StringFilter
    mc_cell_price_ps: StringFilter
    utime_since: FloatFilter
    OR: ConfigP18Filter
}

type ConfigP28 {
    mc_catchain_lifetime: Float
    shard_catchain_lifetime: Float
    shard_validators_lifetime: Float
    shard_validators_num: Float
    shuffle_mc_validators: Boolean
}

input ConfigP28Filter {
    mc_catchain_lifetime: FloatFilter
    shard_catchain_lifetime: FloatFilter
    shard_validators_lifetime: FloatFilter
    shard_validators_num: FloatFilter
    shuffle_mc_validators: BooleanFilter
    OR: ConfigP28Filter
}

type ConfigP29 {
    attempt_duration: Float
    catchain_max_deps: Float
    consensus_timeout_ms: Float
    fast_attempts: Float
    max_block_bytes: Float
    max_collated_bytes: Float
    new_catchain_ids: Boolean
    next_candidate_delay_ms: Float
    round_candidates: Float
}

input ConfigP29Filter {
    attempt_duration: FloatFilter
    catchain_max_deps: FloatFilter
    consensus_timeout_ms: FloatFilter
    fast_attempts: FloatFilter
    max_block_bytes: FloatFilter
    max_collated_bytes: FloatFilter
    new_catchain_ids: BooleanFilter
    next_candidate_delay_ms: FloatFilter
    round_candidates: FloatFilter
    OR: ConfigP29Filter
}

type ConfigP39 {
    adnl_addr: String
    seqno: Float
    signature_r: String
    signature_s: String
    temp_public_key: String
    valid_until: Float
}

input ConfigP39ArrayFilter {
    any: ConfigP39Filter
    all: ConfigP39Filter
}

input ConfigP39Filter {
    adnl_addr: StringFilter
    seqno: FloatFilter
    signature_r: StringFilter
    signature_s: StringFilter
    temp_public_key: StringFilter
    valid_until: FloatFilter
    OR: ConfigP39Filter
}

type ConfigP6 {
    mint_add_price: String
    mint_new_price: String
}

input ConfigP6Filter {
    mint_add_price: StringFilter
    mint_new_price: StringFilter
    OR: ConfigP6Filter
}

type ConfigP7 {
    currency: Float
    value: String
}

input ConfigP7ArrayFilter {
    any: ConfigP7Filter
    all: ConfigP7Filter
}

input ConfigP7Filter {
    currency: FloatFilter
    value: StringFilter
    OR: ConfigP7Filter
}

type ConfigP8 {
    capabilities(format: BigIntFormat): String
    version: Float
}

input ConfigP8Filter {
    capabilities: StringFilter
    version: FloatFilter
    OR: ConfigP8Filter
}

type ConfigProposalSetup {
    bit_price: Float
    cell_price: Float
    max_losses: Int
    max_store_sec: Float
    max_tot_rounds: Int
    min_store_sec: Float
    min_tot_rounds: Int
    min_wins: Int
}

input ConfigProposalSetupFilter {
    bit_price: FloatFilter
    cell_price: FloatFilter
    max_losses: IntFilter
    max_store_sec: FloatFilter
    max_tot_rounds: IntFilter
    min_store_sec: FloatFilter
    min_tot_rounds: IntFilter
    min_wins: IntFilter
    OR: ConfigProposalSetupFilter
}

type ExtBlkRef {
    end_lt(format: BigIntFormat): String
    file_hash: String
    root_hash: String
    seq_no: Float
}

input ExtBlkRefFilter {
    end_lt: StringFilter
    file_hash: StringFilter
    root_hash: StringFilter
    seq_no: FloatFilter
    OR: ExtBlkRefFilter
}

input FieldAggregation {
    field: String
    fn: AggregationFn
}

input FloatArrayFilter {
    any: FloatFilter
    all: FloatFilter
}

input FloatFilter {
    eq: Float
    ne: Float
    gt: Float
    lt: Float
    ge: Float
    le: Float
    in: [Float]
    notIn: [Float]
}

type GasLimitsPrices {
    block_gas_limit(format: BigIntFormat): String
    delete_due_limit(format: BigIntFormat): String
    flat_gas_limit(format: BigIntFormat): String
    flat_gas_price(format: BigIntFormat): String
    freeze_due_limit(format: BigIntFormat): String
    gas_credit(format: BigIntFormat): String
    gas_limit(format: BigIntFormat): String
    gas_price(format: BigIntFormat): String
    special_gas_limit(format: BigIntFormat): String
}

input GasLimitsPricesFilter {
    block_gas_limit: StringFilter
    delete_due_limit: StringFilter
    flat_gas_limit: StringFilter
    flat_gas_price: StringFilter
    freeze_due_limit: StringFilter
    gas_credit: StringFilter
    gas_limit: StringFilter
    gas_price: StringFilter
    special_gas_limit: StringFilter
    OR: GasLimitsPricesFilter
}

type Info {
    version: String
    time: Float
    endpoints: [String]
}

type InMsg {
    fwd_fee(format: BigIntFormat): String
    ihr_fee(format: BigIntFormat): String
    in_msg: MsgEnvelope
    msg_id: String
    msg_type: Int
    msg_type_name: InMsgTypeEnum
    out_msg: MsgEnvelope
    proof_created: String
    proof_delivered: String
    transaction_id: String
    transit_fee(format: BigIntFormat): String
}

input InMsgArrayFilter {
    any: InMsgFilter
    all: InMsgFilter
}

input InMsgFilter {
    fwd_fee: StringFilter
    ihr_fee: StringFilter
    in_msg: MsgEnvelopeFilter
    msg_id: StringFilter
    msg_type: IntFilter
    msg_type_name: InMsgTypeEnumFilter
    out_msg: MsgEnvelopeFilter
    proof_created: StringFilter
    proof_delivered: StringFilter
    transaction_id: StringFilter
    transit_fee: StringFilter
    OR: InMsgFilter
}

enum InMsgTypeEnum {
    External
    Ihr
    Immediately
    Final
    Transit
    DiscardedFinal
    DiscardedTransit
}

input InMsgTypeEnumFilter {
    eq: InMsgTypeEnum
    ne: InMsgTypeEnum
    gt: InMsgTypeEnum
    lt: InMsgTypeEnum
    ge: InMsgTypeEnum
    le: InMsgTypeEnum
    in: [InMsgTypeEnum]
    notIn: [InMsgTypeEnum]
}

input IntFilter {
    eq: Int
    ne: Int
    gt: Int
    lt: Int
    ge: Int
    le: Int
    in: [Int]
    notIn: [Int]
}

type Message {
    id: String
    block(timeout: Int, when: MessageFilter): Block
    block_id: String
    boc: String
    body: String
    body_hash: String
    bounce: Boolean
    bounced: Boolean
    code: String
    code_hash: String
    created_at: Float
    created_at_string: String
    created_lt(format: BigIntFormat): String
    data: String
    data_hash: String
    dst: String
    dst_transaction(timeout: Int, when: MessageFilter): Transaction
    dst_workchain_id: Int
    fwd_fee(format: BigIntFormat): String
    ihr_disabled: Boolean
    ihr_fee(format: BigIntFormat): String
    import_fee(format: BigIntFormat): String
    library: String
    library_hash: String
    msg_type: Int
    msg_type_name: MessageTypeEnum
    proof: String
    split_depth: Int
    src: String
    src_transaction(timeout: Int, when: MessageFilter): Transaction
    src_workchain_id: Int
    status: Int
    status_name: MessageProcessingStatusEnum
    tick: Boolean
    tock: Boolean
    value(format: BigIntFormat): String
    value_other: [OtherCurrency]
}

input MessageArrayFilter {
    any: MessageFilter
    all: MessageFilter
}

input MessageFilter {
    id: StringFilter
    block: BlockFilter
    block_id: StringFilter
    boc: StringFilter
    body: StringFilter
    body_hash: StringFilter
    bounce: BooleanFilter
    bounced: BooleanFilter
    code: StringFilter
    code_hash: StringFilter
    created_at: FloatFilter
    created_lt: StringFilter
    data: StringFilter
    data_hash: StringFilter
    dst: StringFilter
    dst_transaction: TransactionFilter
    dst_workchain_id: IntFilter
    fwd_fee: StringFilter
    ihr_disabled: BooleanFilter
    ihr_fee: StringFilter
    import_fee: StringFilter
    library: StringFilter
    library_hash: StringFilter
    msg_type: IntFilter
    msg_type_name: MessageTypeEnumFilter
    proof: StringFilter
    split_depth: IntFilter
    src: StringFilter
    src_transaction: TransactionFilter
    src_workchain_id: IntFilter
    status: IntFilter
    status_name: MessageProcessingStatusEnumFilter
    tick: BooleanFilter
    tock: BooleanFilter
    value: StringFilter
    value_other: OtherCurrencyArrayFilter
    OR: MessageFilter
}

enum MessageProcessingStatusEnum {
    Unknown
    Queued
    Processing
    Preliminary
    Proposed
    Finalized
    Refused
    Transiting
}

input MessageProcessingStatusEnumFilter {
    eq: MessageProcessingStatusEnum
    ne: MessageProcessingStatusEnum
    gt: MessageProcessingStatusEnum
    lt: MessageProcessingStatusEnum
    ge: MessageProcessingStatusEnum
    le: MessageProcessingStatusEnum
    in: [MessageProcessingStatusEnum]
    notIn: [MessageProcessingStatusEnum]
}

enum MessageTypeEnum {
    Internal
    ExtIn
    ExtOut
}

input MessageTypeEnumFilter {
    eq: MessageTypeEnum
    ne: MessageTypeEnum
    gt: MessageTypeEnum
    lt: MessageTypeEnum
    ge: MessageTypeEnum
    le: MessageTypeEnum
    in: [MessageTypeEnum]
    notIn: [MessageTypeEnum]
}

type MsgEnvelope {
    cur_addr: String
    fwd_fee_remaining(format: BigIntFormat): String
    msg_id: String
    next_addr: String
}

input MsgEnvelopeFilter {
    cur_addr: StringFilter
    fwd_fee_remaining: StringFilter
    msg_id: StringFilter
    next_addr: StringFilter
    OR: MsgEnvelopeFilter
}

type MsgForwardPrices {
    bit_price(format: BigIntFormat): String
    cell_price(format: BigIntFormat): String
    first_frac: Int
    ihr_price_factor: Float
    lump_price(format: BigIntFormat): String
    next_frac: Int
}

input MsgForwardPricesFilter {
    bit_price: StringFilter
    cell_price: StringFilter
    first_frac: IntFilter
    ihr_price_factor: FloatFilter
    lump_price: StringFilter
    next_frac: IntFilter
    OR: MsgForwardPricesFilter
}

type Mutation {
    postRequests(
        requests: [Request]
        accessKey: String
    ): [String]
    registerAccessKeys(
        account: String
        keys: [AccessKey]
        signedManagementAccessKey: String
    ): Int
    revokeAccessKeys(
        account: String
        keys: [String]
        signedManagementAccessKey: String
    ): Int
    finishOperations(operationIds: [String]): Int
}

type OtherCurrency {
    currency: Float
    value(format: BigIntFormat): String
}

input OtherCurrencyArrayFilter {
    any: OtherCurrencyFilter
    all: OtherCurrencyFilter
}

input OtherCurrencyFilter {
    currency: FloatFilter
    value: StringFilter
    OR: OtherCurrencyFilter
}

type OutMsg {
    import_block_lt(format: BigIntFormat): String
    imported: InMsg
    msg_env_hash: String
    msg_id: String
    msg_type: Int
    msg_type_name: OutMsgTypeEnum
    next_addr_pfx(format: BigIntFormat): String
    next_workchain: Int
    out_msg: MsgEnvelope
    reimport: InMsg
    transaction_id: String
}

input OutMsgArrayFilter {
    any: OutMsgFilter
    all: OutMsgFilter
}

input OutMsgFilter {
    import_block_lt: StringFilter
    imported: InMsgFilter
    msg_env_hash: StringFilter
    msg_id: StringFilter
    msg_type: IntFilter
    msg_type_name: OutMsgTypeEnumFilter
    next_addr_pfx: StringFilter
    next_workchain: IntFilter
    out_msg: MsgEnvelopeFilter
    reimport: InMsgFilter
    transaction_id: StringFilter
    OR: OutMsgFilter
}

enum OutMsgTypeEnum {
    External
    Immediately
    OutMsgNew
    Transit
    DequeueImmediately
    Dequeue
    TransitRequired
    DequeueShort
    None
}

input OutMsgTypeEnumFilter {
    eq: OutMsgTypeEnum
    ne: OutMsgTypeEnum
    gt: OutMsgTypeEnum
    lt: OutMsgTypeEnum
    ge: OutMsgTypeEnum
    le: OutMsgTypeEnum
    in: [OutMsgTypeEnum]
    notIn: [OutMsgTypeEnum]
}

type Query {
    blocks_signatures(
        filter: BlockSignaturesFilter
        orderBy: [QueryOrderBy]
        limit: Int
        timeout: Float
        accessKey: String
        operationId: String
    ): [BlockSignatures]
    blocks(
        filter: BlockFilter
        orderBy: [QueryOrderBy]
        limit: Int
        timeout: Float
        accessKey: String
        operationId: String
    ): [Block]
    transactions(
        filter: TransactionFilter
        orderBy: [QueryOrderBy]
        limit: Int
        timeout: Float
        accessKey: String
        operationId: String
    ): [Transaction]
    messages(
        filter: MessageFilter
        orderBy: [QueryOrderBy]
        limit: Int
        timeout: Float
        accessKey: String
        operationId: String
    ): [Message]
    accounts(
        filter: AccountFilter
        orderBy: [QueryOrderBy]
        limit: Int
        timeout: Float
        accessKey: String
        operationId: String
    ): [Account]
    zerostates(
        filter: ZerostateFilter
        orderBy: [QueryOrderBy]
        limit: Int
        timeout: Float
        accessKey: String
        operationId: String
    ): [Zerostate]
    info: Info
    getAccountsCount(accessKey: String): Float
    getTransactionsCount(accessKey: String): Float
    getAccountsTotalBalance(accessKey: String): String
    getManagementAccessKey: String
    aggregateBlockSignatures(
        filter: BlockSignaturesFilter
        fields: [FieldAggregation]
        accessKey: String
    ): [String]
    aggregateBlocks(
        filter: BlockFilter
        fields: [FieldAggregation]
        accessKey: String
    ): [String]
    aggregateTransactions(
        filter: TransactionFilter
        fields: [FieldAggregation]
        accessKey: String
    ): [String]
    aggregateMessages(
        filter: MessageFilter
        fields: [FieldAggregation]
        accessKey: String
    ): [String]
    aggregateAccounts(
        filter: AccountFilter
        fields: [FieldAggregation]
        accessKey: String
    ): [String]
    explainQueryBlockSignatures(
        filter: BlockSignaturesFilter
        orderBy: [QueryOrderBy]
    ): QueryExplanation
    explainQueryBlocks(
        filter: BlockFilter
        orderBy: [QueryOrderBy]
    ): QueryExplanation
    explainQueryTransactions(
        filter: TransactionFilter
        orderBy: [QueryOrderBy]
    ): QueryExplanation
    explainQueryMessages(
        filter: MessageFilter
        orderBy: [QueryOrderBy]
    ): QueryExplanation
    explainQueryAccounts(
        filter: AccountFilter
        orderBy: [QueryOrderBy]
    ): QueryExplanation
    explainQueryZerostates(
        filter: ZerostateFilter
        orderBy: [QueryOrderBy]
    ): QueryExplanation
}

type QueryExplanation {
    isFast: Boolean
    slowReason: SlowReason
}

input QueryOrderBy {
    path: String
    direction: QueryOrderByDirection
}

enum QueryOrderByDirection {
    ASC
    DESC
}

input Request {
    id: String
    body: String
    expireAt: Float
}

enum SkipReasonEnum {
    NoState
    BadState
    NoGas
}

input SkipReasonEnumFilter {
    eq: SkipReasonEnum
    ne: SkipReasonEnum
    gt: SkipReasonEnum
    lt: SkipReasonEnum
    ge: SkipReasonEnum
    le: SkipReasonEnum
    in: [SkipReasonEnum]
    notIn: [SkipReasonEnum]
}

type SlowReason {
    summary: String
    fields: [String]
    selectedIndexes: [String]
    availableIndexes: [String]
}

enum SplitTypeEnum {
    None
    Split
    Merge
}

input SplitTypeEnumFilter {
    eq: SplitTypeEnum
    ne: SplitTypeEnum
    gt: SplitTypeEnum
    lt: SplitTypeEnum
    ge: SplitTypeEnum
    le: SplitTypeEnum
    in: [SplitTypeEnum]
    notIn: [SplitTypeEnum]
}

input StringArrayFilter {
    any: StringFilter
    all: StringFilter
}

input StringFilter {
    eq: String
    ne: String
    gt: String
    lt: String
    ge: String
    le: String
    in: [String]
    notIn: [String]
}

type Subscription {
    blocks_signatures(
        filter: BlockSignaturesFilter
        accessKey: String
    ): BlockSignatures
    blocks(filter: BlockFilter, accessKey: String): Block
    transactions(filter: TransactionFilter, accessKey: String): Transaction
    messages(filter: MessageFilter, accessKey: String): Message
    accounts(filter: AccountFilter, accessKey: String): Account
    zerostates(filter: ZerostateFilter, accessKey: String): Zerostate
}

type Transaction {
    id: String
    aborted: Boolean
    account_addr: String
    action: TransactionAction
    balance_delta(format: BigIntFormat): String
    balance_delta_other: [OtherCurrency]
    block(timeout: Int, when: TransactionFilter): Block
    block_id: String
    boc: String
    bounce: TransactionBounce
    compute: TransactionCompute
    credit: TransactionCredit
    credit_first: Boolean
    destroyed: Boolean
    end_status: Int
    end_status_name: AccountStatusEnum
    in_message(timeout: Int, when: TransactionFilter): Message
    in_msg: String
    installed: Boolean
    lt(format: BigIntFormat): String
    new_hash: String
    now: Float
    old_hash: String
    orig_status: Int
    orig_status_name: AccountStatusEnum
    out_messages(timeout: Int, when: TransactionFilter): [Message]
    out_msgs: [String]
    outmsg_cnt: Int
    prepare_transaction: String
    prev_trans_hash: String
    prev_trans_lt(format: BigIntFormat): String
    proof: String
    split_info: TransactionSplitInfo
    status: Int
    status_name: TransactionProcessingStatusEnum
    storage: TransactionStorage
    total_fees(format: BigIntFormat): String
    total_fees_other: [OtherCurrency]
    tr_type: Int
    tr_type_name: TransactionTypeEnum
    tt: String
    workchain_id: Int
}

type TransactionAction {
    action_list_hash: String
    msgs_created: Int
    no_funds: Boolean
    result_arg: Int
    result_code: Int
    skipped_actions: Int
    spec_actions: Int
    status_change: Int
    status_change_name: AccountStatusChangeEnum
    success: Boolean
    tot_actions: Int
    total_action_fees(format: BigIntFormat): String
    total_fwd_fees(format: BigIntFormat): String
    total_msg_size_bits: Float
    total_msg_size_cells: Float
    valid: Boolean
}

input TransactionActionFilter {
    action_list_hash: StringFilter
    msgs_created: IntFilter
    no_funds: BooleanFilter
    result_arg: IntFilter
    result_code: IntFilter
    skipped_actions: IntFilter
    spec_actions: IntFilter
    status_change: IntFilter
    status_change_name: AccountStatusChangeEnumFilter
    success: BooleanFilter
    tot_actions: IntFilter
    total_action_fees: StringFilter
    total_fwd_fees: StringFilter
    total_msg_size_bits: FloatFilter
    total_msg_size_cells: FloatFilter
    valid: BooleanFilter
    OR: TransactionActionFilter
}

type TransactionBounce {
    bounce_type: Int
    bounce_type_name: BounceTypeEnum
    fwd_fees(format: BigIntFormat): String
    msg_fees(format: BigIntFormat): String
    msg_size_bits: Float
    msg_size_cells: Float
    req_fwd_fees(format: BigIntFormat): String
}

input TransactionBounceFilter {
    bounce_type: IntFilter
    bounce_type_name: BounceTypeEnumFilter
    fwd_fees: StringFilter
    msg_fees: StringFilter
    msg_size_bits: FloatFilter
    msg_size_cells: FloatFilter
    req_fwd_fees: StringFilter
    OR: TransactionBounceFilter
}

type TransactionCompute {
    account_activated: Boolean
    compute_type: Int
    compute_type_name: ComputeTypeEnum
    exit_arg: Int
    exit_code: Int
    gas_credit: Int
    gas_fees(format: BigIntFormat): String
    gas_limit(format: BigIntFormat): String
    gas_used(format: BigIntFormat): String
    mode: Int
    msg_state_used: Boolean
    skipped_reason: Int
    skipped_reason_name: SkipReasonEnum
    success: Boolean
    vm_final_state_hash: String
    vm_init_state_hash: String
    vm_steps: Float
}

input TransactionComputeFilter {
    account_activated: BooleanFilter
    compute_type: IntFilter
    compute_type_name: ComputeTypeEnumFilter
    exit_arg: IntFilter
    exit_code: IntFilter
    gas_credit: IntFilter
    gas_fees: StringFilter
    gas_limit: StringFilter
    gas_used: StringFilter
    mode: IntFilter
    msg_state_used: BooleanFilter
    skipped_reason: IntFilter
    skipped_reason_name: SkipReasonEnumFilter
    success: BooleanFilter
    vm_final_state_hash: StringFilter
    vm_init_state_hash: StringFilter
    vm_steps: FloatFilter
    OR: TransactionComputeFilter
}

type TransactionCredit {
    credit(format: BigIntFormat): String
    credit_other: [OtherCurrency]
    due_fees_collected(format: BigIntFormat): String
}

input TransactionCreditFilter {
    credit: StringFilter
    credit_other: OtherCurrencyArrayFilter
    due_fees_collected: StringFilter
    OR: TransactionCreditFilter
}

input TransactionFilter {
    id: StringFilter
    aborted: BooleanFilter
    account_addr: StringFilter
    action: TransactionActionFilter
    balance_delta: StringFilter
    balance_delta_other: OtherCurrencyArrayFilter
    block: BlockFilter
    block_id: StringFilter
    boc: StringFilter
    bounce: TransactionBounceFilter
    compute: TransactionComputeFilter
    credit: TransactionCreditFilter
    credit_first: BooleanFilter
    destroyed: BooleanFilter
    end_status: IntFilter
    end_status_name: AccountStatusEnumFilter
    in_message: MessageFilter
    in_msg: StringFilter
    installed: BooleanFilter
    lt: StringFilter
    new_hash: StringFilter
    now: FloatFilter
    old_hash: StringFilter
    orig_status: IntFilter
    orig_status_name: AccountStatusEnumFilter
    out_messages: MessageArrayFilter
    out_msgs: StringArrayFilter
    outmsg_cnt: IntFilter
    prepare_transaction: StringFilter
    prev_trans_hash: StringFilter
    prev_trans_lt: StringFilter
    proof: StringFilter
    split_info: TransactionSplitInfoFilter
    status: IntFilter
    status_name: TransactionProcessingStatusEnumFilter
    storage: TransactionStorageFilter
    total_fees: StringFilter
    total_fees_other: OtherCurrencyArrayFilter
    tr_type: IntFilter
    tr_type_name: TransactionTypeEnumFilter
    tt: StringFilter
    workchain_id: IntFilter
    OR: TransactionFilter
}

enum TransactionProcessingStatusEnum {
    Unknown
    Preliminary
    Proposed
    Finalized
    Refused
}

input TransactionProcessingStatusEnumFilter {
    eq: TransactionProcessingStatusEnum
    ne: TransactionProcessingStatusEnum
    gt: TransactionProcessingStatusEnum
    lt: TransactionProcessingStatusEnum
    ge: TransactionProcessingStatusEnum
    le: TransactionProcessingStatusEnum
    in: [TransactionProcessingStatusEnum]
    notIn: [TransactionProcessingStatusEnum]
}

type TransactionSplitInfo {
    acc_split_depth: Int
    cur_shard_pfx_len: Int
    sibling_addr: String
    this_addr: String
}

input TransactionSplitInfoFilter {
    acc_split_depth: IntFilter
    cur_shard_pfx_len: IntFilter
    sibling_addr: StringFilter
    this_addr: StringFilter
    OR: TransactionSplitInfoFilter
}

type TransactionStorage {
    status_change: Int
    status_change_name: AccountStatusChangeEnum
    storage_fees_collected(format: BigIntFormat): String
    storage_fees_due(format: BigIntFormat): String
}

input TransactionStorageFilter {
    status_change: IntFilter
    status_change_name: AccountStatusChangeEnumFilter
    storage_fees_collected: StringFilter
    storage_fees_due: StringFilter
    OR: TransactionStorageFilter
}

enum TransactionTypeEnum {
    Ordinary
    Storage
    Tick
    Tock
    SplitPrepare
    SplitInstall
    MergePrepare
    MergeInstall
}

input TransactionTypeEnumFilter {
    eq: TransactionTypeEnum
    ne: TransactionTypeEnum
    gt: TransactionTypeEnum
    lt: TransactionTypeEnum
    ge: TransactionTypeEnum
    le: TransactionTypeEnum
    in: [TransactionTypeEnum]
    notIn: [TransactionTypeEnum]
}

scalar Upload

type ValidatorSet {
    list: [ValidatorSetList]
    total: Int
    total_weight(format: BigIntFormat): String
    utime_since: Float
    utime_since_string: String
    utime_until: Float
    utime_until_string: String
}

input ValidatorSetFilter {
    list: ValidatorSetListArrayFilter
    total: IntFilter
    total_weight: StringFilter
    utime_since: FloatFilter
    utime_until: FloatFilter
    OR: ValidatorSetFilter
}

type ValidatorSetList {
    adnl_addr: String
    public_key: String
    weight(format: BigIntFormat): String
}

input ValidatorSetListArrayFilter {
    any: ValidatorSetListFilter
    all: ValidatorSetListFilter
}

input ValidatorSetListFilter {
    adnl_addr: StringFilter
    public_key: StringFilter
    weight: StringFilter
    OR: ValidatorSetListFilter
}

type Zerostate {
    id: String
    accounts: [ZerostateAccounts]
    global_id: Int
    libraries: [ZerostateLibraries]
    master: ZerostateMaster
    total_balance(format: BigIntFormat): String
    total_balance_other: [OtherCurrency]
    workchain_id: Int
}

type ZerostateAccounts {
    id: String
    acc_type: Int
    acc_type_name: AccountStatusEnum
    balance(format: BigIntFormat): String
    balance_other: [OtherCurrency]
    bits(format: BigIntFormat): String
    boc: String
    cells(format: BigIntFormat): String
    code: String
    code_hash: String
    data: String
    data_hash: String
    due_payment(format: BigIntFormat): String
    last_paid: Float
    last_trans_lt(format: BigIntFormat): String
    library: String
    library_hash: String
    proof: String
    public_cells(format: BigIntFormat): String
    split_depth: Int
    state_hash: String
    tick: Boolean
    tock: Boolean
    workchain_id: Int
}

input ZerostateAccountsArrayFilter {
    any: ZerostateAccountsFilter
    all: ZerostateAccountsFilter
}

input ZerostateAccountsFilter {
    id: StringFilter
    acc_type: IntFilter
    acc_type_name: AccountStatusEnumFilter
    balance: StringFilter
    balance_other: OtherCurrencyArrayFilter
    bits: StringFilter
    boc: StringFilter
    cells: StringFilter
    code: StringFilter
    code_hash: StringFilter
    data: StringFilter
    data_hash: StringFilter
    due_payment: StringFilter
    last_paid: FloatFilter
    last_trans_lt: StringFilter
    library: StringFilter
    library_hash: StringFilter
    proof: StringFilter
    public_cells: StringFilter
    split_depth: IntFilter
    state_hash: StringFilter
    tick: BooleanFilter
    tock: BooleanFilter
    workchain_id: IntFilter
    OR: ZerostateAccountsFilter
}

input ZerostateFilter {
    id: StringFilter
    accounts: ZerostateAccountsArrayFilter
    global_id: IntFilter
    libraries: ZerostateLibrariesArrayFilter
    master: ZerostateMasterFilter
    total_balance: StringFilter
    total_balance_other: OtherCurrencyArrayFilter
    workchain_id: IntFilter
    OR: ZerostateFilter
}

type ZerostateLibraries {
    hash: String
    lib: String
    publishers: [String]
}

input ZerostateLibrariesArrayFilter {
    any: ZerostateLibrariesFilter
    all: ZerostateLibrariesFilter
}

input ZerostateLibrariesFilter {
    hash: StringFilter
    lib: StringFilter
    publishers: StringArrayFilter
    OR: ZerostateLibrariesFilter
}

type ZerostateMaster {
    config: Config
    config_addr: String
    global_balance(format: BigIntFormat): String
    global_balance_other: [OtherCurrency]
    validator_list_hash_short: Float
}

input ZerostateMasterFilter {
    config: ConfigFilter
    config_addr: StringFilter
    global_balance: StringFilter
    global_balance_other: OtherCurrencyArrayFilter
    validator_list_hash_short: FloatFilter
    OR: ZerostateMasterFilter
}

